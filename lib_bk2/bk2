
class HomePage extends StatelessWidget {
  static List<Tab> tabs = <Tab>[
    Tab(
      text: 'Tab1',
    ),
    Tab(
      text: 'Tab2',
    ),
    Tab(
      text: 'Tab3',
    ),
    Tab(
      text: 'Tab4',
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return
  }
}

class _HomePage extends State<HomePage> {
  static List<Tab> tabs = <Tab>[
    Tab(
      text: 'Tab1',
    ),
    Tab(
      text: 'Tab2',
    ),
    Tab(
      text: 'Tab3',
    ),
    Tab(
      text: 'Tab4',
    ),
  ];

  Map<int, List<String>> searchResultsByTabIndex = {};

  void performSearch(String searchValue) {
    List<String> searchResults = [];

    // Get the current active tab index
    int currentIndex = DefaultTabController.of(context).index;

    if (searchValue.isNotEmpty) {
      // Search for data based on the current tab index and search value
      searchResults = Provider.of<HomeProvider>(context, listen: false)
          .searchData(currentIndex, searchValue);
    }

    setState(() {
      searchResults.isNotEmpty
          ? searchResultsByTabIndex[currentIndex] = searchResults
          : searchResultsByTabIndex.remove(currentIndex);
    });
  }

  @override
  Widget build(BuildContext context) {
    TextEditingController searchController = TextEditingController();

    return DefaultTabController(
      initialIndex: 0,
      length: tabs.length,
      child: Scaffold(
        appBar: AppBar(
          leading: IconButton(
            onPressed: () {
              Navigator.pop(context,
                  MaterialPageRoute(builder: (context) => LoginPage()));
            },
            icon: Icon(
              Icons.arrow_back,
              color: Colors.orangeAccent,
            ),
          ),
          title: Container(
            decoration: BoxDecoration(
                // color: Colors.white,
                border: Border.all(color: Colors.red, width: 1.0),
                borderRadius: BorderRadius.circular(10.0)),
            child: Row(children: <Widget>[
              Expanded(
                child: TextField(
                  controller: searchController,
                  decoration: InputDecoration(
                    hintText: 'Search',
                    border: InputBorder.none,
                  ),
                ),
              ),
              IconButton(
                icon: Icon(Icons.search),
                onPressed: () {
                  String searchValue = searchController.text;
                  performSearch(searchValue);
                },
              ),
            ]),
          ),
          actions: <Widget>[
            TextButton(
                onPressed: () {},
                child: Icon(
                  Icons.filter_alt_outlined,
                  color: Colors.orangeAccent,
                ))
          ],
          bottom: TabBar(
            tabs: tabs,
          ),
          backgroundColor: Colors.lightBlueAccent,
        ),
        body: TabBarView(
          children: List.generate(
            tabs.length,
            (index) => buildTabContent(index),
          ),
        ),
      ),
    );
  }

  Widget buildTabContent(int index) {
    final homeProvider = Provider.of<HomeProvider>(context);

    // Use search results if available, otherwise get data for the tab index
    List<String> data = searchResultsByTabIndex.containsKey(index)
        ? searchResultsByTabIndex[index]!
        : homeProvider.gridViewData[index] ?? [];

    return GridView.builder(
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
      ),
      itemBuilder: (context, index) {
        return Container(
          color: Colors.blue,
          margin: EdgeInsets.all(8.0),
          child: Center(child: Text(data[index])),
        );
      },
      itemCount: data.length,
    );
  }
}
